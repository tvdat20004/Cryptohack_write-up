

# This file was *autogenerated* from the file matrix_reloaded.sage
from sage.all_cmdline import *   # import sage library

_sage_const_13322168333598193507807385110954579994440518298037390249219367653433362879385570348589112466639563190026187881314341273227495066439490025867330585397455471 = Integer(13322168333598193507807385110954579994440518298037390249219367653433362879385570348589112466639563190026187881314341273227495066439490025867330585397455471); _sage_const_30 = Integer(30); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_128 = Integer(128); _sage_const_16 = Integer(16)
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto.Util.number import *
from Crypto.Util.Padding import pad, unpad

import json
from os import urandom

FLAG = b'crypto{?????????????????????????????????????}'

P = _sage_const_13322168333598193507807385110954579994440518298037390249219367653433362879385570348589112466639563190026187881314341273227495066439490025867330585397455471 
N = _sage_const_30 

def load_matrix(fname):
    data = open(fname, 'r').read().strip()
    rows = [list(map(int, row.split(' '))) for row in data.splitlines()]
    return Matrix(GF(P), rows)

SECRET = getRandomRange(int(_sage_const_0 ), int(P-_sage_const_1 ))
KEY_LENGTH = _sage_const_128 
KEY = SHA256.new(data=str(SECRET).encode()).digest()[:KEY_LENGTH]

G = load_matrix("generator.txt")
H = G**SECRET

v = vector(GF(P), [getRandomRange(int(_sage_const_0 ), int(P-_sage_const_1 )) for _ in range(N)])
w = H*v

json.dump({
    'v': [int(x) for x in list(v)],
    'w': [int(x) for x in list(w)]
}, open('output1.txt', 'w'))

iv = urandom(_sage_const_16 )
cipher = AES.new(KEY, AES.MODE_CBC, iv)
plaintext = pad(FLAG, _sage_const_16 )
ciphertext = cipher.encrypt(plaintext)

json.dump({
    "iv": iv.hex(), 
    "ciphertext": ciphertext.hex()
}, open('flag1.enc', 'w'))

