

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_50 = Integer(50); _sage_const_31337 = Integer(31337); _sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_7 = Integer(7); _sage_const_1 = Integer(1)
N = _sage_const_50 
E = _sage_const_31337 
FLAG = b'crypto{??????????????????????????}'

def load_matrix(fname):
    data = open(fname, 'r').read().strip()
    rows = [list(map(int, row)) for row in data.splitlines()]
    return Matrix(GF(_sage_const_2 ), rows)

def recover_plaintext(mat):
    temp = ""
    for i in range(N):
        for j in range(N):
            temp = temp + str(mat[j][i])

    temp = temp[:len(FLAG) * _sage_const_8 ]
    return int(temp, _sage_const_2 ).to_bytes((len(temp) + _sage_const_7 ) // _sage_const_8 , 'big')

mtx = load_matrix('flag_403b981c77d39217c20390c1729b15f0.enc')
d = pow(E, -_sage_const_1 , mtx.multiplicative_order())
mat = mtx ** d

# _bin = ""
# for column in [mat.column(i) for i in range(50)]:
#     bin_str = ''.join(str(j) for j in column)
#     _bin += bin_str

# flag = ''.join([chr(int(_bin[i:i+8],2)) for i in range(0,len(_bin),8)])
flag = recover_plaintext(mat)
print(flag)

