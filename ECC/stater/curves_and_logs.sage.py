

# This file was *autogenerated* from the file curves_and_logs.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_815 = Integer(815); _sage_const_3190 = Integer(3190); _sage_const_9739 = Integer(9739); _sage_const_1829 = Integer(1829); _sage_const_497 = Integer(497); _sage_const_1768 = Integer(1768)
class Point:
	def __init__(self,x,y,p):
		F = GF(p)
		self.x = F(x)
		self.y = F(y)
		self.modulus = p

def addition(p1 : Point, p2: Point, a,b):
	x1 = p1.x
	x2 = p2.x
	y1 = p1.y
	y2 = p2.y

	if x1 == x2 and y1 == y2:
		lamda = (_sage_const_3 *x1**_sage_const_2  + a) / (_sage_const_2 *y1)
	else:
		lamda = (y2 - y1) / (x2 - x1)
	x = lamda**_sage_const_2  - x1 - x2
	y = lamda*(x1 - x) - y1
	return Point(x,y,p1.modulus)
def scalar_multiplication(p: Point, n,a,b):
	q = p
	r = _sage_const_0 
	while n > _sage_const_0 :
		if n % _sage_const_2  == _sage_const_1 :
			try:
				r = addition(r,q,a,b)
			except:
				r = q
		q = addition(q,q,a,b)
		n = n//_sage_const_2 
	return r 


q = Point(_sage_const_815 , _sage_const_3190 ,_sage_const_9739 )

a = scalar_multiplication(q,_sage_const_1829 ,_sage_const_497 ,_sage_const_1768 )
import hashlib
print(hashlib.sha1(str(a.x).encode()).hexdigest())

