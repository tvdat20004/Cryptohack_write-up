

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_13386 = Integer(13386); _sage_const_11 = Integer(11); _sage_const_0 = Integer(0)
from Crypto.Util.number import long_to_bytes
import json 
from pwn import *
from sage.all import *
r = remote("socket.cryptohack.org", int(_sage_const_13386 ))
r.recvuntil(b'\n')

def get_para():
	send = json.dumps({"option" : "get_flag"})
	r.sendline(send.encode())
	data = json.loads(r.recvuntilS(b'\n'))

	enc = data["encrypted_flag"]
	n = data["modulus"]
	a,b = data["padding"]
	return enc, n, a, b 
enc1, n,a1,b1 = get_para()
enc2, n,a2,b2 = get_para()
r.close()
P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)
f1 = (a1*x + b1)**_sage_const_11  - enc1
f2 = (a2*x + b2)**_sage_const_11  - enc2
def gcd_zmod(f, g):
    while g:
        f, g = g, f % g
    return f
f = gcd_zmod(f1,f2).monic()
m = f.coefficients()[_sage_const_0 ]
print(long_to_bytes(int(-m)))

