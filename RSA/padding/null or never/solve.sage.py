

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103 = Integer(95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103); _sage_const_3 = Integer(3); _sage_const_63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828 = Integer(63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828); _sage_const_35 = Integer(35); _sage_const_100 = Integer(100); _sage_const_43 = Integer(43); _sage_const_256 = Integer(256); _sage_const_58 = Integer(58); _sage_const_1 = Integer(1); _sage_const_30 = Integer(30); _sage_const_0 = Integer(0)
from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes  
import gmpy2  

n = _sage_const_95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103 
e = _sage_const_3 
c = _sage_const_63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828 

P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)
sample = b"crypto{" + b'\0'*_sage_const_35  + b'}' + b'\0'*(_sage_const_100  - _sage_const_43 )
f = (bytes_to_long(sample) + _sage_const_256 **_sage_const_58  * x)**e - c 
f = f.monic()
root = f.small_roots(epsilon=_sage_const_1 /_sage_const_30 )

print(b"crypto{" + long_to_bytes(int(root[_sage_const_0 ])) + b'}')

