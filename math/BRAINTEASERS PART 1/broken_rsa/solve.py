n = 27772857409875257529415990911214211975844307184430241451899407838750503024323367895540981606586709985980003435082116995888017731426634845808624796292507989171497629109450825818587383112280639037484593490692935998202437639626747133650990603333094513531505209954273004473567193235535061942991750932725808679249964667090723480397916715320876867803719301313440005075056481203859010490836599717523664197112053206745235908610484907715210436413015546671034478367679465233737115549451849810421017181842615880836253875862101545582922437858358265964489786463923280312860843031914516061327752183283528015684588796400861331354873
e = 16
ct = 11303174761894431146735697569489134747234975144162172162401674567273034831391936916397234068346115459134602443963604063679379285919302225719050193590179240191429612072131629779948379821039610415099784351073443218911356328815458050694493726951231241096695626477586428880220528001269746547018741237131741255022371957489462380305100634600499204435763201371188769446054925748151987175656677342779043435047048130599123081581036362712208692748034620245590448762406543804069935873123161582756799517226666835316588896306926659321054276507714414876684738121421124177324568084533020088172040422767194971217814466953837590498718
from Crypto.Util.number import long_to_bytes
import math
# search for a quadratic non-residue
def search(p):
	for i in range(p):
		if pow(i, (p-1)//2, p) == p-1:
			return i
def is_quadratic_residue(a,p):
	return pow(a,(p-1)//2,p) == 1
def find_sqrt_modular(np,p):
	ans = []
	for n in np:
		if not is_quadratic_residue(n,p):
			continue
		s_max = round(math.log(p-1,2))
		s = s_max
		while s >= 1:
			if (p-1) % pow(2,s) == 0:
				q = (p-1) // pow(2,s)
				break
			s -= 1
		# print(s,q)
		z = search(p)
		m = s
		c = pow(z,q,p)
		t = pow(n,q,p)
		R = pow(n,(q+1)//2,p)
		while t != 1 and t != 0:
			i = 1
			while True:
				if (pow(t,int(pow(2,i)),p) != 1):
					i += 1
				else: 
					break
			b = pow(c,int(pow(2,m-i-1)),p)
			m = i
			c = b*b % p
			t = t*b*b % p
			R = R*b % p
		if t == 0:
			r = 0
		elif t == 1:
			r = R
		r1 = (-r) % p
		ans.append(r)
		ans.append(r1)
	return ans



m = ct
a = [m]
for x in range(4):
	a = find_sqrt_modular(a,n)

for pt in a:
	flag = long_to_bytes(pt)
	if b'crypto' in flag:
		print(flag)
		break
# b"Hey, if you are reading this maybe I didn't mess up my code too much. Phew. I really should play more CryptoHack before rushing to code stuff from scratch again. Here's the flag: crypto{m0dul4r_squ4r3_r00t}"
